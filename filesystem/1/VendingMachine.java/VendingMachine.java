data:text/x-java;base64,package impl;

import java.util.HashMap;

import common.AbstractFactoryClient;
import common.LaneCodeAlreadyInUseException;
import common.LaneCodeNotRegisteredException;
import common.ProductUnavailableException;
import interfaces.IVendingMachineProduct;
import interfaces.IVendingMachine;
import interfaces.IProductRecord;

/**
 * This class represents a simple vending machine which can stock and sell products.
 *
 */
public class VendingMachine extends AbstractFactoryClient implements IVendingMachine {

    // stores all of the products for in the vending machine in form K: <lane>, V: <product instance>
    private HashMap<String, IVendingMachineProduct> products;
    // this map stores K: IVendingMachineProduct to ensure that the product records are tied to the vending
    // machine instance, but still coupled to their corresponding product
    private HashMap<IVendingMachineProduct, IProductRecord> productRecords;

    VendingMachine()
    {
        products = new HashMap<String, IVendingMachineProduct>();
        productRecords = new HashMap<IVendingMachineProduct, IProductRecord>();
    }

    /**
     * This method adds a IVendingMachineProduct to the products HashMap, and
     * creates a product record for the given product. This product record is
     * added to the productRecords attribute of the class
     * @param vendingMachineProduct represents an individual product sold in the
     * vending machine
     * @throws LaneCodeAlreadyInUseException if the given product has a lane
     * code which is already occupied
     */
    @Override
    public void registerProduct(IVendingMachineProduct vendingMachineProduct)
        throws LaneCodeAlreadyInUseException
    {
        // makes sure the VendingMachineProduct instance is not null
        if (vendingMachineProduct == null)
        {
            throw new IllegalArgumentException(
                "product being registered with the vending machine must not be null");
        }
        // if the lane code already has a mapping, throw an exception
        else if (products.get(vendingMachineProduct.getLaneCode()) != null)
        {
            throw new LaneCodeAlreadyInUseException();
        }
        this.products.put(
            vendingMachineProduct.getLaneCode(), vendingMachineProduct);
        this.productRecords.put(
            vendingMachineProduct, getFactory().makeProductRecord(vendingMachineProduct));
    }

    /**
     * This method takes a product and it's record out of the products and
     * productRecords HashMaps
     * @param vendingMachineProduct the product to be unregistered
     * @throws LaneCodeNotRegisteredException if the given product is
     * not registered in the vending machine
     */
    @Override
    public void unregisterProduct(IVendingMachineProduct vendingMachineProduct)
        throws LaneCodeNotRegisteredException
    {
        // if there is no mapping for the given product, throw an exception
        if (products.get(vendingMachineProduct.getLaneCode()) == null)
        {
            throw new LaneCodeNotRegisteredException();
        }
        this.products.remove(vendingMachineProduct.getLaneCode());
        this.productRecords.remove(vendingMachineProduct);
    }

    /**
     * This method adds an item to the amount in a given lane
     * @param laneCode the lane code for the product to have an
     * item added to it
     * @throws LaneCodeNotRegisteredException if there is no product
     * registered in the given position
     */
    @Override
    public void addItem(String laneCode) 
        throws LaneCodeNotRegisteredException
    {
        // makes sure there is a product registered with this lane code
        if (this.products.get(laneCode) == null)
        {
            throw new LaneCodeNotRegisteredException();
        }
        IVendingMachineProduct product = this.products.get(laneCode);
        IProductRecord productRecord = this.productRecords.get(product);
        productRecord.addItem();
    }

    /**
     * This method imitates the behaviour of buying an item, accessing
     * it via lane code
     * @param laneCode is the position in the vending machine of the product
     * being bought
     * @throws LaneCodeNotRegisteredException if there is no product
     * registered in the given position
     * @throws ProductUnavailableException if the product has no available
     * items
     */
    @Override
    public void buyItem(String laneCode)
        throws ProductUnavailableException, LaneCodeNotRegisteredException
    {
        // makes sure there is a product registered with this lane code
        IVendingMachineProduct product = this.products.get(laneCode);
        if (product == null)
        {
            throw new LaneCodeNotRegisteredException();
        }
        IProductRecord productRecord = this.productRecords.get(product);
        productRecord.buyItem();
    }

    /**
     * this method returns the total number of products,
     * accessed through the HashMap which stores these
     * products
     * @return number of products in vending machine
     */
    @Override
    public int getNumberOfProducts() {
        return this.products.size();
    }

    /**
     * This method iterates over all of the products' productRecords
     * and gets the total number of items
     * @return the total number of items in the vending machine
     */
    @Override
    public int getTotalNumberOfItems() {
        int totalItems = 0;
        for (IProductRecord record: this.productRecords.values())
        {
            totalItems += record.getNumberAvailable();
        }
        return totalItems;
    }

    /**
     * this method gets the number of available items for
     * a given registered product
     * @return the number of items available for a given
     * product
     * @throws LaneCodeNotRegisteredException if there is no product
     * registered in the given position
     */
    @Override
    public int getNumberOfItems(String laneCode)
        throws LaneCodeNotRegisteredException
    {
        // makes sure there is a product registered with this lane code
        IVendingMachineProduct product = this.products.get(laneCode);
        if (product == null)
        {
            throw new LaneCodeNotRegisteredException();
        }
        IProductRecord record = this.productRecords.get(product);
        return record.getNumberAvailable();
    }

    /**
     * This method gets the number of sales for a given registered product
     * given it's lane code
     * @param laneCode the lane code of a registered product
     * @return the number of sold items of the product
     * @throws LaneCodeNotRegisteredException if there is no product
     * registered in the given position
     */
    @Override
    public int getNumberOfSales(String laneCode)
        throws LaneCodeNotRegisteredException
    {
        // makes sure lane code is registered
        IVendingMachineProduct product = this.products.get(laneCode);
        if (product == null)
        {
            throw new LaneCodeNotRegisteredException();
        }
        IProductRecord record = this.productRecords.get(product);
        return record.getNumberOfSales();
    }

    /**
     * This method iterates through all of the products and
     * returns the most popular
     * @return the most popular product in the vending machine
     * @throws LaneCodeNotRegisteredException if there are no
     * products registered
     */
    @Override
    public IVendingMachineProduct getMostPopular()
        throws LaneCodeNotRegisteredException
    {
        // takes care of case where no products have been registered
        if (this.products.size() == 0)
        {
            throw new LaneCodeNotRegisteredException();
        }
        // iterates through the product records to find the record
        // with the most sales
        int currentMax = 0;
        int currentSales = 0;
        IVendingMachineProduct mostPopular = null;
        for (IProductRecord record: this.productRecords.values())
        {
            currentSales = record.getNumberOfSales();
            if (currentSales > currentMax)
            {
                currentMax = currentSales;
                mostPopular = record.getProduct();
            }
            else if (currentSales == currentMax)
            {
                // in the case of a tie, the product whose description
                // is alphabetically before the other is chosen
                String currentDescription = record.getProduct().getDescription();
                String mostPopularDescription = mostPopular.getDescription();
                if (currentDescription.compareToIgnoreCase(mostPopularDescription) < 0)
                {
                    mostPopular = record.getProduct();
                }
            }
        }
        return mostPopular;
    }
}
