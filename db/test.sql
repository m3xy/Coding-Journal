-- Create and use database (for testing)
CREATE DATABASE IF NOT EXISTS testdb;
USE testdb;

-- table for storing basic user information and credentials. Other info like user description, articles published
-- etc. can all be kept in other tables.
CREATE TABLE IF NOT EXISTS users (
  id varchar(64) NOT NULL DEFAULT UUID(), -- id which is auto-generated during user registration

  -- actual login credentials
  email varchar(100) NOT NULL UNIQUE, -- user email, functions as unique username
  password varchar(64) NOT NULL, -- encrypted user password

  -- necessary user info
  firstName varchar(32) NOT NULL, -- first name of the user
  lastName varchar(32) NOT NULL, -- last name of the user
  userType int NOT NULL DEFAULT 4, -- user type as an integer (mapped to constants in db.go)

  -- extra/optional user info
  phonenumber varchar(11), -- user phone number, is optional, 11 chars to allow for + and 10 digits
  organization varchar(32), -- organization the user is associated with (research org or company)

  CONSTRAINT userTypeCheck CHECK (userType IN (0, 1, 2, 3, 4)), -- makes userType into an integer backed enum
  PRIMARY KEY (id) -- makes the ID the primary key as we know it will be unique
);

/*
	Servers table
	Stores server group number, security token, and URL for server.
*/
CREATE TABLE IF NOT EXISTS servers (
	groupNumber int NOT NULL,    -- Group number.
	token varchar(1028) NOT NULL, -- Token corresponding to the group.
	url varchar(512) NOT NULL, -- URL for server access.

	PRIMARY KEY(groupNumber)
);

/* 
ID mappings table

table to store local to global ID mappings. These are kept distinct
from one another so that the user IDs for our users table can be auto
generated by SQL, keeping ID generation atomic, and simple. This also
allows migrated users to be treated exactly the same as local users
internal to our application.
*/
CREATE TABLE IF NOT EXISTS idMappings (
  localId varchar(64) UNIQUE, -- ID stored locally in users table
  globalId varchar(64) NOT NULL UNIQUE, -- ID which gets sent to other Journals in the Federation

  PRIMARY KEY (globalId),
  FOREIGN KEY (localId) REFERENCES users(id) -- makes local id track to the users table
);

/* 
Submissions Table

table to store submission ID -> name mappings. Note that in the filesystem,
submissions are stored inside a wrapper directory named for their ID, to ensure
uniqueness of IDs
*/
CREATE TABLE IF NOT EXISTS submissions (
  id int NOT NULL AUTO_INCREMENT, -- autogenerated submission ID
  submissionName varchar(64) NOT NULL, -- submission name as submitted by the user
  creationDate date DEFAULT CURDATE(), -- submission creation date.
  license varchar(64), -- License the submission uses for its code.

  PRIMARY KEY (id)
);

/*
Files Table

table to store individual files with their paths in the filesystem. Note that
this table is for locating files in the filesystem and does NOT store any of
the actual file data
*/
CREATE TABLE IF NOT EXISTS files (
  id int NOT NULL AUTO_INCREMENT, -- unique file id number
  submissionId int NOT NULL, -- id of the submission which this file is a part of 
  filePath varchar(128) NOT NULL, -- relative path from the submission root directory to the file

  PRIMARY KEY (id),
  FOREIGN KEY (submissionId) REFERENCES submissions(id)
);

/*
Authors Table

Table mapping submission IDs to their author's user IDs. Allows multiple authors to
exist for a given file/submission
*/
CREATE TABLE IF NOT EXISTS authors (
  submissionId int NOT NULL,
  userId varchar(64) NOT NULL,

  PRIMARY KEY (submissionId, userId),
  FOREIGN KEY (submissionId) REFERENCES submissions(id),
  FOREIGN KEY (userId) REFERENCES idMappings(globalId)
);


/*
Categories table

Many to many relationship table for submission corresponding categories.
*/
CREATE TABLE IF NOT EXISTS categories (
  submissionId int NOT NULL,
  tag varchar(32) NOT NULL,

  PRIMARY KEY (submissionId, tag),
  FOREIGN KEY (submissionId) REFERENCES submissions(id)
);

/*
Reviewers Table

Table mapping submission ID to reviewer's IDs. Allows multiple reviewers to exist
for a submission, and be held separate from the authors.
*/
CREATE TABLE IF NOT EXISTS reviewers (
  submissionId int NOT NULL,
  userId varchar(64) NOT NULL,

  PRIMARY KEY (submissionId, userId),
  FOREIGN KEY (submissionId) REFERENCES submissions(id),
  FOREIGN KEY (userId) REFERENCES idMappings(globalId)
);

/* Set view for users with global ID as ID. */
CREATE VIEW IF NOT EXISTS globalLogins AS
	SELECT globalId, email, password
	FROM idMappings INNER JOIN users
	ON idMappings.localId = users.id;

/* View for user permissions linked with global ID. */
CREATE VIEW IF NOT EXISTS globalPermissions AS
	SELECT globalId, userType
	FROM idMappings INNER JOIN users
	ON idMappings.localId = users.id;

/* View for user credentials linked to global ID. */
CREATE VIEW IF NOT EXISTS globalUserInfo AS
	SELECT globalId, email, firstName, lastName, userType, phoneNumber, organization
	FROM idMappings INNER JOIN users
	ON idMappings.localId = users.id;

/* View for submission with user ID */
CREATE VIEW IF NOT EXISTS submissionList AS
	SELECT userId, submissionId, submissionName
	FROM authors INNER JOIN submissions
	ON authors.submissionId = submissions.id;
