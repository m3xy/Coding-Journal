#+TITLE: Backend

* Response Format

Response bodies are always given in this below format (with the exception of journal endpoints) -
#+begin_src typescript
interface Response {
	message: string // Response's message - gives details on response status.
	error: boolean  // Whether the request errored or not.
	content: any    // The response's body.
}
#+end_src

* API
This section describes main enpoints. There are 4 main entrypoints in the api,
starting with =cs3099user11.host.cs.st-andrews.ac.uk/api/<version>=:
+ =/journal/=: Supergroup compliant endpoints,
+ =/auth/=: Authentication requests - client login, signup.
+ =/user/=: User retrieval requests.
** Journal
*** Login
Supergroup compliant journal login.
**** Endpoint
This is accessed via the *GET* =/journal/login= endpoint.

**** Request
***** Headers
- X-FOREIGNJOURNAL-SECURITY-TOKEN: Journal's secret key. Needed for all journal queries. *MUST NOT BE SHARED WITH ANY CLIENT.*
***** Body
#+begin_src json
{
	"email": "string",
	"password": "string"
}
#+end_src

**** Response
***** Status
+ 200 - User logged in, response OK.
+ 404 - User was not found.
+ 401 - Access Unauthorized. See Headers.
***** Content
#+begin_src typescript
interface Content {
	userId: string   // ID of the logged in user. Empty if errored
}
#+end_src

** Authentication
*** Login
Client-only login endpoint.
**** Endpoint
This is accessed via the *GET* =/auth/login= endpoint.
**** Request
***** Headers
No headers required.
***** Body
#+begin_src typescript
interface Body {
	client_id: string 		// ID used to find client - here, it is an email.
	client_secret: string   // Client's secret for authentication - here, password.
}
#+end_src
**** Response
***** Status
+ 200 - User logged in, response OK.
+ 404 - User was not found.
+ 401 - Access Unauthorized. See Headers.

***** Content
#+begin_src typescript
interface Content {
	token: string   			// Token used for restriced user access later on.
	refresh_token: string		// Refresh token - used to make a new token after expiry.
	redirect_uri: string 		// Address to token refresh request.
}
#+end_src

*** Register
Client registration endpoint.
**** Endpoint
The endpoint is accessible as *GET* =/auth/register=
**** Request
***** Headers
No required headers.
***** Body
#+begin_src typescript
interface Content {
	// Required
	Email: string  	// Client ID
	Password: string    // Client Secret
	FirstName: string
	LastName: string

	// Optional
	PhoneNumber?: string
	Organization?: string
}
#+end_src

**** Response
***** Status
+ 200 - User successfully registered, response OK.
+ 405 - Bad request, form given is invalid.
***** Body
This function has no response content.

** User
*** Profile Query
User profile information query.
**** Endpoint
The endpoint for the query is =/user/{ID}=, where ID stands for the user's UUID in the server.
**** Request
***** Headers
No header or authentication is required for this query.
**** Response
***** Status
+ 200 - Query successful, requested information contained in content.
+ 404 - User not found, content empty.
***** Body
The `Content` value in the response is of type below
#+begin_src typescript
interface Content {
	UserID: string
	FullName: string
	Profile: Profile
}

interface Profile {
	Email: string
	FirstName: string
	LastName: string
	PhoneNumber: string
	Organization: string
	CreatedAt: DateTime // Format -
}
#+end_src
